//
//  IIRFilterTests.swift
//  SimpleSDR3Tests
//
//  Test data from liquid-dsp-1.3.2/src/filter/tests/data/iirfilt_?r?f_data_h?x*.c
//
//  Complex coefficients is not implemented
//
//  Created by Andy Hooper on 2020-04-22.
//  Copyright Â© 2020 Andy Hooper. All rights reserved.
//

import XCTest
import struct Accelerate.vecLib.vDSP.DSPComplex
@testable import sdrlib

class IIRFilterTests: XCTestCase {
    
    fileprivate func runTest(_ b: [Float], _ a: [Float], _ x: [Float], _ y: [Float]) {
        // Test on the whole block
        let f = IIRFilter(source:NilSource<RealSamples>.Real(), b, a)
        var o=RealSamples()
        f.process(RealSamples(x), &o)
        AssertEqual(o, y, accuracy:2.0e-6)
        
        // Test on two halves in sequence, to exercise stream overalap
        let f2 = IIRFilter(source:NilSource<RealSamples>.Real(), b, a)
        let half = x.count / 2
        var oo=RealSamples(), o2=RealSamples()
        f2.process(RealSamples(Array(x[0..<half])), &oo)
        f2.process(RealSamples(Array(x[half...])), &o2)
        oo.append(o2)
        AssertEqual(oo, y, accuracy:2.0e-6)

        // Test on individual samples, to exercise stream overalap
        let f3 = IIRFilter(source:NilSource<RealSamples>.Real(), b, a)
        var o3 = RealSamples()
        oo.removeAll()
        for i in 0..<x.count {
            f3.process(RealSamples(Array(x[i...i])), &o3)
            oo.append(o3)
        }
        AssertEqual(oo, y, accuracy:2.0e-6)
        AssertEqual(oo, Array(o[0..<o.count]), accuracy: 0.0)
    }
    
    fileprivate func runTest22(_ b: [Float], _ a: [Float], _ x: [Float], _ y: [Float]) {
        precondition(b.count==2 && a.count==2 && a[0]==1.0)
        // Test on the whole block
        let f = IIR22Filter(source:NilSource<RealSamples>.Real(), b, a)
        var o=RealSamples()
        f.process(RealSamples(x), &o)
        AssertEqual(o, y, accuracy:2.0e-6)
        
        // Test on two halves in sequence, to exercise stream overalap
        let f2 = IIR22Filter(source:NilSource<RealSamples>.Real(), b, a)
        let half = x.count / 2
        var oo=RealSamples(), o2=RealSamples()
        f2.process(RealSamples(Array(x[0..<half])), &oo)
        f2.process(RealSamples(Array(x[half...])), &o2)
        oo.append(o2)
        AssertEqual(oo, y, accuracy:2.0e-6)

        // Test on individual samples, to exercise stream overalap
        let f3 = IIR22Filter(source:NilSource<RealSamples>.Real(), b, a)
        var o3 = RealSamples()
        oo.removeAll()
        for i in 0..<x.count {
            f3.process(RealSamples(Array(x[i...i])), &o3)
            oo.append(o3)
        }
        AssertEqual(oo, y, accuracy:2.0e-6)
        AssertEqual(oo, Array(o[0..<o.count]), accuracy: 0.0)
    }

    fileprivate func runTest(_ b: [Float], _ a: [Float], _ x: [DSPComplex], _ y: [DSPComplex]) {
        // Test on the whole block
        let f = IIRFilter(source:NilSource<ComplexSamples>.Complex(), b, a)
        var o=ComplexSamples()
        f.process(ComplexSamples(x), &o)
        AssertEqual(o, y, accuracy:2.6e-6)
        
        // Test on two halves in sequence, to exercise stream overalap
        let f2 = IIRFilter(source:NilSource<ComplexSamples>.Complex(), b, a)
        let half = x.count / 2
        var oo=ComplexSamples(), o2=ComplexSamples()
        f2.process(ComplexSamples(Array(x[0..<half])), &oo)
        f2.process(ComplexSamples(Array(x[half...])), &o2)
        oo.append(o2)
        AssertEqual(oo, y, accuracy:2.6e-6)
    }

    func testIIRFilter_Real_h3x64() {
        let iirfilt_rrrf_data_h3x64_b:[Float] = [
            0.067455273889,
            0.134910547778,
            0.067455273889]

        let iirfilt_rrrf_data_h3x64_a:[Float] = [
            1.000000000000,
           -1.142980502540,
            0.412801598096]

        let iirfilt_rrrf_data_h3x64_x:[Float] = [
           -0.028895214542,
           -0.069021825021,
            0.030604896335,
           -0.028355924919,
            0.116559552929,
            0.143033796152,
            0.034240066758,
            0.245754661028,
           -0.085048302237,
            0.037276632441,
           -0.027971098990,
            0.028792388017,
            0.061299546415,
            0.019217231932,
           -0.068210516011,
           -0.030965552175,
           -0.104543256906,
           -0.219154025020,
           -0.060076982615,
            0.175962646540,
            0.111681770625,
            0.038846767797,
           -0.074493060382,
           -0.068437932045,
           -0.210154533613,
           -0.059543914700,
           -0.003275225407,
            0.027794772921,
            0.001988917543,
           -0.065169452924,
            0.076196405886,
           -0.110895781816,
           -0.193987624818,
           -0.048983036631,
           -0.057777317818,
           -0.273728284279,
            0.139583588189,
           -0.048520445612,
            0.038028122617,
            0.142317597668,
            0.006158624121,
            0.094921369690,
            0.106674550704,
           -0.007693480844,
            0.009150091523,
           -0.124420550406,
           -0.048419736980,
            0.074400545011,
           -0.007592916601,
           -0.023547687981,
            0.086672380799,
            0.052067890613,
            0.134684497125,
            0.051380348106,
           -0.007288328205,
           -0.053065747221,
           -0.029240930355,
           -0.010101089710,
           -0.143148550970,
           -0.025032159897,
           -0.067586830823,
            0.279800929422,
            0.176230712305,
           -0.021010061898]

        let iirfilt_rrrf_data_h3x64_y:[Float] = [
           -0.001949134611,
           -0.010781978190,
           -0.020715430137,
           -0.021666234384,
           -0.010111215930,
            0.020847673860,
            0.057471408279,
            0.087927924056,
            0.106503226141,
            0.093052363747,
            0.059797591762,
            0.030618424605,
            0.016444297289,
            0.017664634020,
            0.015528526008,
            0.000462009068,
           -0.021712865669,
           -0.055983972836,
           -0.095696176666,
           -0.097287095541,
           -0.044473486551,
            0.018885017236,
            0.047693346170,
            0.034670819807,
           -0.008493798786,
           -0.061005530002,
           -0.088651942626,
           -0.078727771165,
           -0.049725604069,
           -0.026589239497,
           -0.013382207683,
           -0.005916351681,
           -0.024144727506,
           -0.062110319563,
           -0.084615103632,
           -0.100637524633,
           -0.111508046878,
           -0.088814270452,
           -0.050047352820,
           -0.009082968266,
            0.032458745755,
            0.057683060225,
            0.072948677736,
            0.079842760097,
            0.067920438561,
            0.036995173732,
           -0.005187492618,
           -0.031107316161,
           -0.027154581221,
           -0.015790078206,
           -0.004680801567,
            0.014784961041,
            0.040787361040,
            0.065664391433,
            0.073741325675,
            0.056081570347,
            0.024036384207,
           -0.003883289580,
           -0.027352105314,
           -0.051342067332,
           -0.064984304437,
           -0.045014384740,
            0.020451760070,
            0.083190163742]
        runTest(iirfilt_rrrf_data_h3x64_b, iirfilt_rrrf_data_h3x64_a, iirfilt_rrrf_data_h3x64_x, iirfilt_rrrf_data_h3x64_y)
    }

    func testIIRFilter_Real_h5x64() {
        let iirfilt_rrrf_data_h5x64_b:[Float] = [
            0.004824343358,
            0.019297373431,
            0.028946060146,
            0.019297373431,
            0.004824343358]

        let iirfilt_rrrf_data_h5x64_a:[Float] = [
            1.000000000000,
           -2.369513007182,
            2.313988414416,
           -1.054665405879,
            0.187379492368]

        let iirfilt_rrrf_data_h5x64_x:[Float] = [
           -0.071435037288,
           -0.013824638625,
            0.000604766808,
           -0.157245338765,
           -0.148499909731,
            0.036854467235,
           -0.092170127241,
           -0.030750688358,
           -0.256687046040,
           -0.011293794477,
           -0.152735111898,
           -0.039350864050,
           -0.026481755383,
            0.026344708916,
           -0.165804900216,
            0.075110855166,
            0.169733039664,
            0.112960857425,
            0.102855045747,
           -0.058065586616,
           -0.019482689014,
           -0.069631526814,
            0.080391768879,
           -0.148962611101,
           -0.063224959929,
            0.177207853044,
            0.064119106525,
            0.182006292285,
            0.032851335390,
            0.025859709218,
            0.012249245529,
            0.020538703403,
           -0.010050632447,
            0.157918073531,
            0.155799289392,
            0.161618591338,
           -0.061931920946,
           -0.002480403144,
           -0.080860681406,
           -0.119527652190,
            0.041981586004,
            0.049388453948,
           -0.119534817516,
           -0.004446996769,
           -0.010415835934,
            0.070065217532,
            0.016956615378,
            0.196554086088,
           -0.089159910224,
            0.005262040310,
            0.025380561695,
           -0.190719045717,
           -0.137704432243,
           -0.012169688901,
           -0.072683558269,
            0.115787622162,
           -0.013755488460,
            0.060139162368,
            0.002047451288,
            0.123978241358,
            0.006962698789,
           -0.019071948553,
           -0.062140245356,
           -0.111724700578]

        let iirfilt_rrrf_data_h5x64_y:[Float] = [
           -0.000344627148,
           -0.002261801903,
           -0.006893530299,
           -0.013989605147,
           -0.023862607597,
           -0.038312044528,
           -0.056089194368,
           -0.071280615399,
           -0.079550560246,
           -0.083028835474,
           -0.086748998983,
           -0.092533693567,
           -0.097949600919,
           -0.098429082259,
           -0.090466124573,
           -0.075337575372,
           -0.056782281433,
           -0.034261954387,
           -0.004056342067,
            0.032512857031,
            0.065692345386,
            0.082703529450,
            0.076861903089,
            0.052102523397,
            0.018224928933,
           -0.015275405731,
           -0.038407046800,
           -0.040894489472,
           -0.018910631091,
            0.020295410235,
            0.061246521124,
            0.088475490616,
            0.094228350367,
            0.080859234115,
            0.059352937798,
            0.044593577702,
            0.046274753880,
            0.061145236873,
            0.075354763624,
            0.074888924042,
            0.054105775368,
            0.018945116326,
           -0.016551695165,
           -0.040692464489,
           -0.050718972892,
           -0.049083944974,
           -0.038287527306,
           -0.019928604327,
            0.004267855964,
            0.029703630925,
            0.048181600553,
            0.052618134862,
            0.039776735477,
            0.010021908144,
           -0.029959006998,
           -0.066860943714,
           -0.086821708742,
           -0.082569377253,
           -0.056991021236,
           -0.020344296462,
            0.016435506907,
            0.045346639362,
            0.060576452509,
            0.058193434336]

        runTest(iirfilt_rrrf_data_h5x64_b, iirfilt_rrrf_data_h5x64_a, iirfilt_rrrf_data_h5x64_x, iirfilt_rrrf_data_h5x64_y)
    }

    func testIIRFilter_Real_h7x64() {
        let iirfilt_rrrf_data_h7x64_b:[Float] = [
            0.000340537653,
            0.002043225916,
            0.005108064791,
            0.006810753054,
            0.005108064791,
            0.002043225916,
            0.000340537653]

        let iirfilt_rrrf_data_h7x64_a:[Float] = [
            1.000000000000,
           -3.579434798331,
            5.658667165934,
           -4.965415228779,
            2.529494905841,
           -0.705274114510,
            0.083756479619]

        let iirfilt_rrrf_data_h7x64_x:[Float] = [
            0.014320460019,
           -0.048569878607,
           -0.028557745674,
           -0.034174525472,
            0.041246019674,
            0.176001687252,
            0.069536678145,
            0.085964825944,
           -0.085126074719,
           -0.107634084553,
            0.014274481662,
           -0.086938201253,
            0.041217197713,
           -0.012812412897,
            0.112987870327,
           -0.147787754865,
            0.049941237222,
            0.088160959037,
            0.142541502659,
           -0.024664403921,
            0.087433714309,
           -0.131271281366,
           -0.101343790061,
           -0.095899142873,
            0.077515723928,
           -0.128215021128,
           -0.085076363355,
            0.019632244375,
           -0.024601764309,
            0.135464981990,
           -0.096554438720,
           -0.055332193061,
            0.107799859774,
            0.016856032152,
           -0.133717866605,
            0.107909223614,
           -0.000321585843,
           -0.040614549926,
           -0.065576753282,
            0.080916136192,
           -0.062112903973,
            0.097792565904,
            0.053573189262,
            0.101970184507,
            0.007522028461,
           -0.110691703882,
            0.182044058589,
           -0.040926270512,
           -0.092754193263,
           -0.034827070696,
           -0.046124677770,
            0.127874701414,
            0.085875818987,
           -0.157133769105,
           -0.116516897741,
           -0.217687959211,
            0.111806530552,
           -0.053629641350,
           -0.117298829882,
            0.008546053824,
           -0.015153030008,
           -0.012695501670,
           -0.154176199014,
           -0.055346850979]

        let iirfilt_rrrf_data_h7x64_y:[Float] = [
            0.000004876656,
            0.000030175734,
            0.000044602316,
           -0.000207441342,
           -0.001316715725,
           -0.003834371001,
           -0.007275018208,
           -0.009225570706,
           -0.005882384450,
            0.005486878229,
            0.023590162522,
            0.042219969073,
            0.052802355644,
            0.049012293557,
            0.030431004460,
            0.003094166085,
           -0.023276941451,
           -0.039861135430,
           -0.042388322400,
           -0.031669690474,
           -0.011613377381,
            0.012796864675,
            0.036227386395,
            0.053027192148,
            0.057804353706,
            0.047254362471,
            0.022407095078,
           -0.010858715211,
           -0.043986796642,
           -0.068957103048,
           -0.080449888307,
           -0.076669122221,
           -0.059625824351,
           -0.034801293799,
           -0.009374291628,
            0.010427870419,
            0.021114523610,
            0.022335161439,
            0.016423814986,
            0.007136897293,
           -0.002051012043,
           -0.008952563583,
           -0.012527673359,
           -0.012220519177,
           -0.007483592886,
            0.002024488272,
            0.015481250523,
            0.030132672907,
            0.041993092794,
            0.047610337377,
            0.045176156453,
            0.034600601261,
            0.017674973347,
           -0.001466118954,
           -0.017059538441,
           -0.024634672249,
           -0.024401342427,
           -0.021654066688,
           -0.023062032857,
           -0.031927019266,
           -0.046389502559,
           -0.061179016193,
           -0.070675753063,
           -0.071539050622]

        runTest(iirfilt_rrrf_data_h7x64_b, iirfilt_rrrf_data_h7x64_a, iirfilt_rrrf_data_h7x64_x, iirfilt_rrrf_data_h7x64_y)
    }

    func testIIRFilter_Complex_h3x64() {
        let iirfilt_crcf_data_h3x64_b:[Float] = [
            0.067455273889,
            0.134910547778,
            0.067455273889]

        let iirfilt_crcf_data_h3x64_a:[Float] = [
            1.000000000000,
           -1.142980502540,
            0.412801598096]

        let iirfilt_crcf_data_h3x64_x:[DSPComplex] = [
           DSPComplex( 0.157714921372,  0.096933651372),
           DSPComplex( 0.112931825396,  0.063629523666),
           DSPComplex( 0.036350589338,  0.126527528681),
           DSPComplex(-0.131639758916,  0.002850582881),
           DSPComplex( 0.124813993717, -0.161564813627),
           DSPComplex( 0.055810697081, -0.079984015750),
           DSPComplex(-0.113597866433,  0.059629208365),
           DSPComplex(-0.081276130300, -0.032884892886),
           DSPComplex( 0.189206432747,  0.151230084280),
           DSPComplex( 0.046653973791,  0.039106242827),
           DSPComplex( 0.062707370238,  0.114770667926),
           DSPComplex(-0.005370634420, -0.115131667770),
           DSPComplex(-0.042638922558, -0.133249195976),
           DSPComplex(-0.036786574989, -0.119823837652),
           DSPComplex( 0.086588872188,  0.012335566540),
           DSPComplex( 0.162897246678,  0.076457627729),
           DSPComplex(-0.046976140791,  0.024454556465),
           DSPComplex( 0.037224871206,  0.005544202178),
           DSPComplex(-0.106866213474, -0.004556655371),
           DSPComplex( 0.112442348190, -0.043675611175),
           DSPComplex(-0.139836308260, -0.165558641382),
           DSPComplex(-0.124475577909,  0.044150412760),
           DSPComplex(-0.112036331740,  0.092938383030),
           DSPComplex( 0.004665562144,  0.077748113050),
           DSPComplex(-0.016082143750, -0.159087937039),
           DSPComplex(-0.122649745886,  0.169674782967),
           DSPComplex(-0.059903644318, -0.028174007533),
           DSPComplex(-0.135926561418,  0.161939672399),
           DSPComplex( 0.058515792150, -0.092207684338),
           DSPComplex(-0.001328847093, -0.044399214544),
           DSPComplex( 0.148659720963, -0.189463417484),
           DSPComplex(-0.026581782415,  0.095051513873),
           DSPComplex( 0.031890698003, -0.042421129272),
           DSPComplex(-0.122306862234,  0.005962301978),
           DSPComplex(-0.061265177784,  0.106033789898),
           DSPComplex( 0.261292757319, -0.214947283935),
           DSPComplex( 0.103799428426,  0.080318756697),
           DSPComplex(-0.049679368664,  0.150833170036),
           DSPComplex( 0.042691894941,  0.069350178325),
           DSPComplex(-0.046630189152, -0.062689469185),
           DSPComplex(-0.012129146913,  0.031853481774),
           DSPComplex( 0.020440626886,  0.011527708526),
           DSPComplex( 0.048482096955,  0.129990980549),
           DSPComplex( 0.042635428860, -0.223911417035),
           DSPComplex(-0.010964205149, -0.143631009428),
           DSPComplex( 0.065181991532, -0.058004538996),
           DSPComplex(-0.000090077953, -0.081470015783),
           DSPComplex( 0.011047855650,  0.146709286197),
           DSPComplex(-0.114534249385,  0.131496385737),
           DSPComplex( 0.071234677078,  0.077433138944),
           DSPComplex( 0.200723551597,  0.001379408486),
           DSPComplex(-0.026760201597,  0.140751935283),
           DSPComplex( 0.047450662078, -0.024838330640),
           DSPComplex( 0.013847228689, -0.209058524164),
           DSPComplex( 0.093422613814,  0.012081621105),
           DSPComplex( 0.136809870406, -0.145382142602),
           DSPComplex( 0.009187149051,  0.116724633427),
           DSPComplex( 0.136993412455,  0.031913868005),
           DSPComplex( 0.000837449944, -0.080964662247),
           DSPComplex(-0.060279791907, -0.040256932738),
           DSPComplex( 0.037791227194, -0.030926237571),
           DSPComplex(-0.041416454010, -0.072873679453),
           DSPComplex(-0.022768793380, -0.030601437534),
           DSPComplex( 0.108180951121,  0.069467116791)]

        let iirfilt_crcf_data_h3x64_y:[DSPComplex] = [
           DSPComplex( 0.010638703218,  0.006538686002),
           DSPComplex( 0.041055083998,  0.024843109564),
           DSPComplex( 0.070859923453,  0.049353938820),
           DSPComplex( 0.067686035774,  0.067709646463),
           DSPComplex( 0.041224538648,  0.055038544970),
           DSPComplex( 0.030901594293,  0.007957479174),
           DSPComplex( 0.026588402992, -0.031291537326),
           DSPComplex( 0.000590470547, -0.038619471159),
           DSPComplex(-0.016165649635, -0.021437053514),
           DSPComplex( 0.004469726906,  0.012262241589),
           DSPComplex( 0.035069044446,  0.046083751239),
           DSPComplex( 0.049482788267,  0.057966414042),
           DSPComplex( 0.042710472013,  0.030452084359),
           DSPComplex( 0.019794496184, -0.022948199659),
           DSPComplex( 0.002995531001, -0.063121775432),
           DSPComplex( 0.015441215948, -0.063934986641),
           DSPComplex( 0.041061093206, -0.034223045125),
           DSPComplex( 0.047719585714, -0.003893175152),
           DSPComplex( 0.032237020788,  0.011767694149),
           DSPComplex( 0.012826028856,  0.011870448387),
           DSPComplex(-0.000119320177, -0.008657506452),
           DSPComplex(-0.025108083598, -0.037099080266),
           DSPComplex(-0.062432000766, -0.037771955955),
           DSPComplex(-0.084190602890, -0.007096982968),
           DSPComplex(-0.078469021221,  0.013507514859),
           DSPComplex(-0.065062852144,  0.013595810519),
           DSPComplex(-0.063645820627,  0.020222934773),
           DSPComplex(-0.071411851802,  0.036070220963),
           DSPComplex(-0.073780802600,  0.046606489405),
           DSPComplex(-0.056215295888,  0.033869398399),
           DSPComplex(-0.020000348431, -0.005517294981),
           DSPComplex( 0.018518800909, -0.042431351088),
           DSPComplex( 0.038015719300, -0.049039042613),
           DSPComplex( 0.030065702572, -0.037444083204),
           DSPComplex( 0.000189612796, -0.017459075006),
           DSPComplex(-0.011084433416, -0.004290467457),
           DSPComplex( 0.025372744806, -0.014124980335),
           DSPComplex( 0.061854301275, -0.007862452949),
           DSPComplex( 0.063403692253,  0.027289128630),
           DSPComplex( 0.046198628950,  0.049738403126),
           DSPComplex( 0.022401700824,  0.043954279075),
           DSPComplex( 0.003130865455,  0.030553031785),
           DSPComplex(-0.000459085357,  0.029249594984),
           DSPComplex( 0.008978406999,  0.024030129591),
           DSPComplex( 0.018734404042, -0.015736413767),
           DSPComplex( 0.023500424489, -0.066300146201),
           DSPComplex( 0.027175003553, -0.092293433110),
           DSPComplex( 0.026489439187, -0.083128349690),
           DSPComplex( 0.012817484482, -0.033748033571),
           DSPComplex(-0.006186235518,  0.028602009338),
           DSPComplex( 0.003062407634,  0.066032501481),
           DSPComplex( 0.036133722347,  0.078570737258),
           DSPComplex( 0.053166399461,  0.079952991289),
           DSPComplex( 0.051382646333,  0.050991991806),
           DSPComplex( 0.048152970882, -0.003786577505),
           DSPComplex( 0.056593380224, -0.047656514100),
           DSPComplex( 0.070186171051, -0.063832284508),
           DSPComplex( 0.076568506010, -0.045193020750),
           DSPComplex( 0.077701414291, -0.018586956449),
           DSPComplex( 0.062491319025, -0.014074548285),
           DSPComplex( 0.033824419480, -0.021392925087),
           DSPComplex( 0.011102622655, -0.030445232324),
           DSPComplex(-0.005846867304, -0.039949067467),
           DSPComplex(-0.009834168653, -0.037451411970)]
        runTest(iirfilt_crcf_data_h3x64_b, iirfilt_crcf_data_h3x64_a, iirfilt_crcf_data_h3x64_x, iirfilt_crcf_data_h3x64_y)

    }

    func testIIRFilter_Complex_h5x64() {
        let iirfilt_crcf_data_h5x64_b:[Float] = [
            0.004824343358,
            0.019297373431,
            0.028946060146,
            0.019297373431,
            0.004824343358]

        let iirfilt_crcf_data_h5x64_a:[Float] = [
            1.000000000000,
           -2.369513007182,
            2.313988414416,
           -1.054665405879,
            0.187379492368]

        let iirfilt_crcf_data_h5x64_x:[DSPComplex] = [
           DSPComplex( 0.034816486087, -0.057435933225),
           DSPComplex(-0.138922686034,  0.002487157060),
           DSPComplex( 0.002168200782,  0.075752631688),
           DSPComplex( 0.110645778286,  0.097973148283),
           DSPComplex(-0.062999498912,  0.034473236147),
           DSPComplex( 0.030513585484,  0.108486942526),
           DSPComplex( 0.130905798224, -0.206952317034),
           DSPComplex( 0.104557822758, -0.049326363722),
           DSPComplex( 0.175995475228, -0.040903480637),
           DSPComplex( 0.263382017202,  0.007386489593),
           DSPComplex( 0.075401623113,  0.034346157974),
           DSPComplex(-0.004787311774,  0.050323428781),
           DSPComplex( 0.039595621673, -0.013034423002),
           DSPComplex( 0.289435339135,  0.004887226549),
           DSPComplex( 0.000109192613, -0.098143317718),
           DSPComplex( 0.218628727322,  0.045783638022),
           DSPComplex( 0.011357280346,  0.060469524704),
           DSPComplex(-0.005462153874,  0.011440185961),
           DSPComplex( 0.086903581383,  0.054667638583),
           DSPComplex( 0.009197661173, -0.006158688411),
           DSPComplex( 0.082244960567, -0.138538495472),
           DSPComplex( 0.078074527675, -0.110054617600),
           DSPComplex(-0.071517687777, -0.053281282254),
           DSPComplex( 0.050695873651,  0.049035186418),
           DSPComplex(-0.064011859850,  0.057026886508),
           DSPComplex( 0.002187309591,  0.247199024244),
           DSPComplex( 0.177910643270,  0.036260952778),
           DSPComplex(-0.133404966159,  0.007272659425),
           DSPComplex( 0.104545832232,  0.100374198245),
           DSPComplex( 0.152937259249, -0.006345268825),
           DSPComplex(-0.089893987831, -0.066730853350),
           DSPComplex(-0.031614665144, -0.108199665873),
           DSPComplex(-0.019945023665, -0.036637064501),
           DSPComplex( 0.035423077805, -0.084251698103),
           DSPComplex(-0.045559909198, -0.065683835690),
           DSPComplex( 0.082043588708, -0.073113783286),
           DSPComplex( 0.146363247845, -0.313133192986),
           DSPComplex( 0.163657926540,  0.035668446628),
           DSPComplex(-0.133126328934, -0.033221937410),
           DSPComplex(-0.041582597083,  0.060780541288),
           DSPComplex(-0.102136662865,  0.064174466409),
           DSPComplex( 0.129371455827, -0.122309646349),
           DSPComplex( 0.081072163867,  0.121012321373),
           DSPComplex( 0.035429837296,  0.040975877524),
           DSPComplex( 0.047403447509,  0.014166128441),
           DSPComplex( 0.081667476778,  0.117576764934),
           DSPComplex( 0.142529344063, -0.015788307193),
           DSPComplex( 0.107269994778,  0.039678416397),
           DSPComplex(-0.189638285144, -0.025105560583),
           DSPComplex( 0.127449393546, -0.026105377201),
           DSPComplex( 0.051057729361, -0.029706326528),
           DSPComplex( 0.095342091161, -0.221870514334),
           DSPComplex( 0.033077914989, -0.078421433242),
           DSPComplex( 0.139326073519,  0.176520418207),
           DSPComplex( 0.180222947875, -0.140485235948),
           DSPComplex(-0.092080231794,  0.044423535254),
           DSPComplex(-0.116184788790, -0.081712392283),
           DSPComplex(-0.015159814021, -0.253655296232),
           DSPComplex(-0.165572835614,  0.032968825997),
           DSPComplex(-0.018186027637,  0.146030996176),
           DSPComplex(-0.081743534837,  0.046764387177),
           DSPComplex(-0.163907916201,  0.000894565796),
           DSPComplex( 0.066507006426,  0.153027239112),
           DSPComplex(-0.093381553000,  0.004333390574)]

        let iirfilt_crcf_data_h5x64_y:[DSPComplex] = [
           DSPComplex( 0.000167966683, -0.000277090663),
           DSPComplex( 0.000399655237, -0.001752933682),
           DSPComplex(-0.001104267382, -0.004761506250),
           DSPComplex(-0.006137988749, -0.006620307024),
           DSPComplex(-0.012217626919, -0.002445090386),
           DSPComplex(-0.014480238497,  0.010330691717),
           DSPComplex(-0.010763861323,  0.028395668560),
           DSPComplex(-0.000501503170,  0.042087127701),
           DSPComplex( 0.017677520131,  0.040492499282),
           DSPComplex( 0.044775392784,  0.020918790830),
           DSPComplex( 0.079868253591, -0.007890790986),
           DSPComplex( 0.117333468546, -0.032191317082),
           DSPComplex( 0.145332483454, -0.041696063730),
           DSPComplex( 0.153450768495, -0.034623789141),
           DSPComplex( 0.143091173002, -0.017649460381),
           DSPComplex( 0.125440207813, -0.001185301267),
           DSPComplex( 0.110781054574,  0.007694330137),
           DSPComplex( 0.102309442381,  0.009525121208),
           DSPComplex( 0.096424656974,  0.009467240886),
           DSPComplex( 0.087905819414,  0.011472932774),
           DSPComplex( 0.075351746332,  0.015189934128),
           DSPComplex( 0.061539619627,  0.015371965161),
           DSPComplex( 0.050238103007,  0.005354811389),
           DSPComplex( 0.042392909138, -0.015692162843),
           DSPComplex( 0.035487235197, -0.039320795693),
           DSPComplex( 0.026683183579, -0.051939223046),
           DSPComplex( 0.016086735480, -0.042351028087),
           DSPComplex( 0.007718993110, -0.009467148500),
           DSPComplex( 0.005371191435,  0.034876269506),
           DSPComplex( 0.009169183447,  0.073622002790),
           DSPComplex( 0.018251989832,  0.094472386300),
           DSPComplex( 0.030162933688,  0.092028482193),
           DSPComplex( 0.038047814129,  0.066731638129),
           DSPComplex( 0.035763727219,  0.025446392854),
           DSPComplex( 0.023934856252, -0.020176728351),
           DSPComplex( 0.008437472733, -0.058844376262),
           DSPComplex(-0.003244989715, -0.085035950076),
           DSPComplex(-0.003390870214, -0.101037326348),
           DSPComplex( 0.012003956420, -0.111181202859),
           DSPComplex( 0.036474465180, -0.114015132267),
           DSPComplex( 0.054397129333, -0.103816397690),
           DSPComplex( 0.053458816959, -0.078552582252),
           DSPComplex( 0.035502609681, -0.044222383504),
           DSPComplex( 0.014265637465, -0.010619069148),
           DSPComplex( 0.003101144454,  0.016085677224),
           DSPComplex( 0.006286890891,  0.034538795527),
           DSPComplex( 0.020824414839,  0.045682197348),
           DSPComplex( 0.042111099700,  0.051038175528),
           DSPComplex( 0.064730289486,  0.051165119231),
           DSPComplex( 0.079924238054,  0.045642918872),
           DSPComplex( 0.080081550492,  0.034340023196),
           DSPComplex( 0.067180942535,  0.017458189468),
           DSPComplex( 0.051064446907, -0.005688909571),
           DSPComplex( 0.040695417558, -0.033996511064),
           DSPComplex( 0.040715290376, -0.059379363759),
           DSPComplex( 0.051739083738, -0.071274663107),
           DSPComplex( 0.067460869459, -0.066847437344),
           DSPComplex( 0.074610717895, -0.053096308826),
           DSPComplex( 0.062263741557, -0.042094216632),
           DSPComplex( 0.029932249437, -0.041388946019),
           DSPComplex(-0.013495205238, -0.045430267433),
           DSPComplex(-0.055715901366, -0.041773963667),
           DSPComplex(-0.087248260391, -0.024536503294),
           DSPComplex(-0.103228307102,  0.002973369704)]

        runTest(iirfilt_crcf_data_h5x64_b, iirfilt_crcf_data_h5x64_a, iirfilt_crcf_data_h5x64_x, iirfilt_crcf_data_h5x64_y)
    }

    func testIIRFilter_Complex_h7x64() {
        let iirfilt_crcf_data_h7x64_b:[Float] = [
            0.000340537653,
            0.002043225916,
            0.005108064791,
            0.006810753054,
            0.005108064791,
            0.002043225916,
            0.000340537653]

        let iirfilt_crcf_data_h7x64_a:[Float] = [
            1.000000000000,
           -3.579434798331,
            5.658667165934,
           -4.965415228779,
            2.529494905841,
           -0.705274114510,
            0.083756479619]

        let iirfilt_crcf_data_h7x64_x:[DSPComplex] = [
           DSPComplex( 0.004233635522,  0.032166672422),
           DSPComplex(-0.157552590267,  0.250368602921),
           DSPComplex( 0.054267060665, -0.005044027264),
           DSPComplex( 0.051025281222,  0.067245838231),
           DSPComplex(-0.027078112717, -0.126549310903),
           DSPComplex( 0.035527067912,  0.084082095013),
           DSPComplex(-0.045166037588,  0.117512061237),
           DSPComplex(-0.170543036494, -0.210138171552),
           DSPComplex( 0.122017191616,  0.083315021977),
           DSPComplex( 0.087665380573, -0.113419352152),
           DSPComplex(-0.020592340496,  0.051461184327),
           DSPComplex( 0.005438907415, -0.034203108407),
           DSPComplex(-0.004238610906, -0.010875374856),
           DSPComplex( 0.014448167389,  0.140297619530),
           DSPComplex( 0.023037852846,  0.147634578106),
           DSPComplex( 0.039831512515,  0.117367316573),
           DSPComplex(-0.049079756276, -0.134214287084),
           DSPComplex(-0.081369646592, -0.123999271543),
           DSPComplex(-0.060778482772, -0.005943225227),
           DSPComplex( 0.060096536726,  0.110619062414),
           DSPComplex(-0.029590602066,  0.069542558264),
           DSPComplex( 0.276694153680,  0.033847635389),
           DSPComplex(-0.069801585631, -0.024433292968),
           DSPComplex( 0.103527771239,  0.043047059964),
           DSPComplex( 0.052392266919,  0.106611921459),
           DSPComplex( 0.047921013690,  0.144591771640),
           DSPComplex(-0.100885260679,  0.085422512163),
           DSPComplex( 0.023817071089,  0.007631681829),
           DSPComplex(-0.103520290629,  0.065084699549),
           DSPComplex( 0.141218652175,  0.181817618913),
           DSPComplex( 0.091918916526,  0.090132723783),
           DSPComplex( 0.073412476081, -0.185654057154),
           DSPComplex( 0.064690355167, -0.154617720920),
           DSPComplex(-0.141562424619, -0.078498890176),
           DSPComplex(-0.089061791163, -0.089972135569),
           DSPComplex( 0.061285035005, -0.042181313189),
           DSPComplex( 0.011648008082,  0.030075451872),
           DSPComplex(-0.050030705016,  0.044231269056),
           DSPComplex( 0.055904020426, -0.100086776348),
           DSPComplex( 0.067035512200,  0.110427319881),
           DSPComplex( 0.112195729535, -0.159140605014),
           DSPComplex(-0.008321783937, -0.074224475191),
           DSPComplex( 0.124554695470, -0.000035276105),
           DSPComplex( 0.178233609860, -0.241786527172),
           DSPComplex( 0.013428861272,  0.019929110617),
           DSPComplex( 0.106814998943,  0.061446999514),
           DSPComplex(-0.087662510082, -0.142756477357),
           DSPComplex( 0.005116389200,  0.004875226134),
           DSPComplex(-0.082163710392, -0.003854447463),
           DSPComplex( 0.055960629067,  0.147529880141),
           DSPComplex( 0.104198321794,  0.047973142904),
           DSPComplex(-0.092852806707, -0.088517198490),
           DSPComplex( 0.008453380604,  0.016712253059),
           DSPComplex(-0.168237622832,  0.182661482388),
           DSPComplex(-0.003676740087,  0.067558336540),
           DSPComplex( 0.083397702670,  0.084971378309),
           DSPComplex( 0.105858021404,  0.040735314366),
           DSPComplex(-0.117228290082, -0.024601874801),
           DSPComplex(-0.158931397897, -0.101660731802),
           DSPComplex(-0.079872460607, -0.030609694665),
           DSPComplex(-0.070191072161,  0.183132157615),
           DSPComplex(-0.187191287439, -0.013144361324),
           DSPComplex(-0.097352654114, -0.073775329625),
           DSPComplex(-0.160782253378,  0.108482062513)]

        let iirfilt_crcf_data_h7x64_y:[DSPComplex] = [
           DSPComplex( 0.000001441712,  0.000010953963),
           DSPComplex(-0.000039841800,  0.000190192712),
           DSPComplex(-0.000432579170,  0.001292948964),
           DSPComplex(-0.001963477446,  0.005116752194),
           DSPComplex(-0.005460987213,  0.013853437396),
           DSPComplex(-0.010691848048,  0.028003970363),
           DSPComplex(-0.015829219307,  0.044636043744),
           DSPComplex(-0.018444702482,  0.058202478955),
           DSPComplex(-0.017385042715,  0.063522217409),
           DSPComplex(-0.013852978602,  0.058220061227),
           DSPComplex(-0.010372120290,  0.043135943082),
           DSPComplex(-0.008386259332,  0.021557712213),
           DSPComplex(-0.007057894617, -0.001756678543),
           DSPComplex(-0.004462600311, -0.021708921739),
           DSPComplex( 0.000413860784, -0.033985730231),
           DSPComplex( 0.006867599715, -0.035636537512),
           DSPComplex( 0.013151792937, -0.025207996188),
           DSPComplex( 0.017581663360, -0.003488920494),
           DSPComplex( 0.018987594562,  0.024903700370),
           DSPComplex( 0.016476110032,  0.051134067764),
           DSPComplex( 0.009459018773,  0.065241189212),
           DSPComplex(-0.001441469538,  0.061675106678),
           DSPComplex(-0.013298737003,  0.042982674038),
           DSPComplex(-0.020975009992,  0.018439112600),
           DSPComplex(-0.019171489571, -0.001220893708),
           DSPComplex(-0.005478667970, -0.008887635676),
           DSPComplex( 0.017790116314, -0.002906881750),
           DSPComplex( 0.044167796652,  0.014155489246),
           DSPComplex( 0.065318293362,  0.037562815973),
           DSPComplex( 0.073959143834,  0.061781091547),
           DSPComplex( 0.066724360261,  0.081615483562),
           DSPComplex( 0.046102292983,  0.093697367755),
           DSPComplex( 0.020214021152,  0.097173425139),
           DSPComplex(-0.000316969804,  0.092297203234),
           DSPComplex(-0.007456572181,  0.078335403968),
           DSPComplex(-0.000109513959,  0.053648935265),
           DSPComplex( 0.015245116502,  0.018291043433),
           DSPComplex( 0.028507759029, -0.023453077073),
           DSPComplex( 0.031847159216, -0.063005523552),
           DSPComplex( 0.023465571027, -0.090337797990),
           DSPComplex( 0.007593101686, -0.098277994324),
           DSPComplex(-0.008080860379, -0.085900545160),
           DSPComplex(-0.015861382531, -0.059241419647),
           DSPComplex(-0.011151330660, -0.029092859925),
           DSPComplex( 0.006066947770, -0.006896796239),
           DSPComplex( 0.031921995818, -0.000519982404),
           DSPComplex( 0.060475303064, -0.011467885217),
           DSPComplex( 0.085275600399, -0.034448894253),
           DSPComplex( 0.100389600600, -0.059802028892),
           DSPComplex( 0.101457128362, -0.077810326455),
           DSPComplex( 0.087090251053, -0.082216982388),
           DSPComplex( 0.060162530535, -0.071286280151),
           DSPComplex( 0.027739822472, -0.047336780803),
           DSPComplex(-0.001368012589, -0.016047415915),
           DSPComplex(-0.020598333225,  0.014978961236),
           DSPComplex(-0.028528780470,  0.039136270897),
           DSPComplex(-0.028450797573,  0.053688158765),
           DSPComplex(-0.024993006862,  0.060174099568),
           DSPComplex(-0.020853885213,  0.062097322569),
           DSPComplex(-0.016606097058,  0.061833377745),
           DSPComplex(-0.013052589087,  0.058990818175),
           DSPComplex(-0.012808887831,  0.051482609352),
           DSPComplex(-0.019272140076,  0.038484586328),
           DSPComplex(-0.034383553960,  0.022386350903)]

        runTest(iirfilt_crcf_data_h7x64_b, iirfilt_crcf_data_h7x64_a, iirfilt_crcf_data_h7x64_x, iirfilt_crcf_data_h7x64_y)
    }
    
    func test_iir22_direct_003() {
            runTest22([Float]([2, 11]),
                    [Float]([1,  0]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2, 15, 28, 41, 54, 67, 80, 93]))
    }
    func test_iir22_direct_004() {
            runTest22([Float]([2, 11]),
                    [Float]([1,  1]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2, 13, 15, 26, 28, 39, 41, 52]))
    }

    // Test data from gnuradio-3.7.9/gr-filter/python/filter/qa_iir_filter.py
    
    // gnuradio uses feedback taps that are negative of what most definitions use
    fileprivate func runGRTest(_ b: [Float], _ a: [Float], _ x: [Float], _ y: [Float]) {
        var aneg = [Float](a.map{-$0})
        aneg[0] = 1.0
        runTest(b, aneg, x, y)
    }
    fileprivate func runGRTest(_ b: [Float], _ a: [Float], _ x: [DSPComplex], _ y: [DSPComplex]) {
        var aneg = [Float](a.map{-$0})
        aneg[0] = 1.0
        runTest(b, aneg, x, y)
    }

    func test_iir_direct_002() {
            runGRTest([Float]([2]),
                    [Float]([0]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2, 4, 6, 8, 10, 12, 14, 16]))
    }
    func test_iir_direct_003() {
            runGRTest([Float]([2, 11]),
                    [Float]([0,  0]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2, 15, 28, 41, 54, 67, 80, 93]))
    }
    func test_iir_direct_004() {
            runGRTest([Float]([2, 11]),
                    [Float]([0,  -1]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2, 13, 15, 26, 28, 39, 41, 52]))
    }
    func test_iir_direct_005() {
            runGRTest([Float]([2, 11,  0]),
                    [Float]([0,  -1, 3]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2, 13, 21, 59, 58, 186, 68, 583]))
    }
    func test_iir_direct_006() {
            runGRTest([Float]([2, 11,  0]),
                    [Float]([0,  -1, 3]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2, 13, 21, 59, 58, 186, 68, 583]))
    }
    func test_iir_direct_007() {
            runGRTest([Float]([2,0,1]),
                    [Float]([0, -1]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2,2,5,5,8,8,11,11]))
    }
    func test_iir_direct_008() {
            runGRTest([Float]([2]),
                    [Float]([0,0, -1,3]),
                    [Float]([1, 2, 3, 4, 5, 6, 7, 8]),
                    [Float]([2,4,4,10,18,14,26,56]))
    }
    func test_iir_ccf_001() {
            runGRTest([Float]([2]),
                    [Float]([0, 1]),
                    [DSPComplex]([DSPComplex(1,1), DSPComplex(2,2), DSPComplex(3,3), DSPComplex(4,4),
                                  DSPComplex(5,5), DSPComplex(6,6), DSPComplex(7,7), DSPComplex(8,8)]),
                    [DSPComplex]([DSPComplex(2,2), DSPComplex(6,6), DSPComplex(12,12), DSPComplex(20,20),
                                  DSPComplex(30,30), DSPComplex(42,42), DSPComplex(56,56),
                                  DSPComplex(72,72)]))
    }
}
